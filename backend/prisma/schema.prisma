// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address                   String  @id @unique
  name                      String?
  nonce                     String
  teams                     Team[]  @relation("MemberTeams")
  ownedTeams                Team[]  @relation("OwnedTeams")
  notifications             Notification[]
  BoardOfDirectorActions    BoardOfDirectorActions[]
  memberTeamsData           MemberTeamsData[]
  //Meta data
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique
}

model Team {
  id                        Int     @id @default(autoincrement())
  members                   User[]  @relation("MemberTeams")
  owner                     User    @relation("OwnedTeams", fields: [ownerAddress], references: [address])
  ownerAddress              String
  description               String?
  name                      String  @unique
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique

  // Removes thoses address and use a team contract Table
  bankAddress               String? // A team can have no bank contract
  votingAddress             String?
  boardOfDirectorsAddress   String?
  expenseAccountAddress     String?
  officerAddress            String?
  investorsAddress          String?
  expenseAccountEip712Address     String?
  cashRemunerationEip712Address   String?
  BoardOfDirectorActions    BoardOfDirectorActions[]
  teamContracts TeamContract[]
  memberTeamsData           MemberTeamsData[]
}

model MemberTeamsData {
  id                        Int      @id @default(autoincrement())  // Add an ID for easy referencing
  user                      User     @relation(fields: [userAddress], references: [address])
  team                      Team     @relation(fields: [teamId], references: [id])
  userAddress               String
  teamId                    Int
  // Weird data
  expenseAccountData        String?
  expenseAccountSignature   String?
  hourlyRate                String?
  maxHoursPerWeek           Int?
  claims                    Claim[]
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique

  @@unique([userAddress, teamId]) 
}

model Claim {
  id                        Int      @id @default(autoincrement())  // Add an ID for easy referencing
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique
  status                    String
  hoursWorked               Int?
  cashRemunerationSignature String?
  memberTeamsDataId         Int
  memberTeamsData           MemberTeamsData @relation(fields: [memberTeamsDataId], references: [id])
}

model Notification {
  id                        Int      @id @default(autoincrement())
  subject                   String?
  message                   String
  isRead                    Boolean  @default(false)
  userAddress               String
  user                      User     @relation(fields: [userAddress], references: [address])
  author                    String?
  resource                  String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique
}

model TeamContract {
  id           Int       @id @default(autoincrement())
  address      String    @unique
  type         String
  deployer     String
  admins       String[]
  teamId       Int
  team         Team      @relation(fields: [teamId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique
  @@index([address])
  }


model BoardOfDirectorActions {
  id                        Int      @id @default(autoincrement())
  actionId                  Int
  description               String
  targetAddress             String
  userAddress               String
  isExecuted                Boolean  @default(false)
  data                      String
  createdBy                 User     @relation(fields: [userAddress], references: [address])
  teamId                    Int
  team                      Team     @relation(fields: [teamId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // slug                      String? @unique
}
