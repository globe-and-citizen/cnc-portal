// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address                   String  @id @unique
  name                      String?
  nonce                     String
  teams                     Team[]  @relation("MemberTeams")
  ownedTeams                Team[]  @relation("OwnedTeams")
  notifications             Notification[]
  BoardOfDirectorActions    BoardOfDirectorActions[]
  memberTeamsData           MemberTeamsData[]
}

model Team {
  id                        Int     @id @default(autoincrement())
  members                   User[]  @relation("MemberTeams")
  owner                     User    @relation("OwnedTeams", fields: [ownerAddress], references: [address])
  ownerAddress              String
  description               String?
  name                      String  @unique
  bankAddress               String? // A team can have no bank contract
  votingAddress             String?
  boardOfDirectorsAddress   String?
  expenseAccountAddress     String?
  officerAddress            String?
  expenseAccountEip712Address     String?
  BoardOfDirectorActions    BoardOfDirectorActions[]
  memberTeamsData           MemberTeamsData[]
}

model MemberTeamsData {
  id                        Int      @id @default(autoincrement())  // Add an ID for easy referencing
  user                      User     @relation(fields: [userAddress], references: [address])
  team                      Team     @relation(fields: [teamId], references: [id])
  userAddress               String
  teamId                    Int
  expenseAccountData        String?
  expenseAccountSignature   String?

  @@unique([userAddress, teamId]) 
}

model Notification {
  id                        Int      @id @default(autoincrement())
  subject                   String?
  message                   String
  isRead                    Boolean  @default(false)
  userAddress               String
  user                      User     @relation(fields: [userAddress], references: [address])
  createdAt                 DateTime @default(now())
  author                    String?
  resource                  String?
}

model BoardOfDirectorActions {
  id                        Int      @id @default(autoincrement())
  actionId                  Int
  description               String
  targetAddress             String
  userAddress               String
  isExecuted                Boolean  @default(false)
  data                      String
  createdBy                 User     @relation(fields: [userAddress], references: [address])
  teamId                    Int
  team                      Team     @relation(fields: [teamId], references: [id])
  createdAt                 DateTime @default(now())
}
