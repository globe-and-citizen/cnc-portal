// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address                String                   @id @unique
  name                   String?
  nonce                  String
  teams                  Team[]                   @relation("MemberTeams")
  ownedTeams             Team[]                   @relation("OwnedTeams")
  notifications          Notification[]
  BoardOfDirectorActions BoardOfDirectorActions[]
  memberTeamsData        MemberTeamsData[]
  Wage                   Wage[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Team {
  id                            Int                      @id @default(autoincrement())
  members                       User[]                   @relation("MemberTeams")
  owner                         User                     @relation("OwnedTeams", fields: [ownerAddress], references: [address])
  ownerAddress                  String
  description                   String?
  name                          String                   @unique
  bankAddress                   String? // A team can have no bank contract
  votingAddress                 String?
  boardOfDirectorsAddress       String?
  expenseAccountAddress         String?
  officerAddress                String?
  investorsAddress              String?
  expenseAccountEip712Address   String?
  cashRemunerationEip712Address String?
  BoardOfDirectorActions        BoardOfDirectorActions[]
  teamContracts                 TeamContract[]
  memberTeamsData               MemberTeamsData[]
  Wage                          Wage[]
  createdAt                     DateTime                 @default(now())
  updatedAt                     DateTime                 @updatedAt
}

model MemberTeamsData {
  id                      Int      @id @default(autoincrement()) // Add an ID for easy referencing
  user                    User     @relation(fields: [userAddress], references: [address])
  team                    Team     @relation(fields: [teamId], references: [id])
  userAddress             String
  teamId                  Int
  expenseAccountData      String?
  expenseAccountSignature String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([userAddress, teamId])
}

model Wage {
  id                  Int           @id @default(autoincrement())
  team                Team          @relation(fields: [teamId], references: [id])
  user                User          @relation(fields: [userAddress], references: [address])
  teamId              Int
  userAddress         String
  cashRatePerHour     Int
  tokenRatePerHour    Int
  maximumHoursPerWeek Int
  nextWage            wageRelated[] @relation("nextWage")
  previousWage        wageRelated[] @relation("previousWage")
  claims              Claim[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model wageRelated {
  nextWage       Wage @relation("nextWage", fields: [nextWageId], references: [id])
  nextWageId     Int
  previousWage   Wage @relation("previousWage", fields: [previousWageId], references: [id])
  previousWageId Int

  @@unique([previousWageId])
}

model Claim {
  id          Int      @id @default(autoincrement()) // Add an ID for easy referencing
  status      String
  hoursWorked Int?
  signature   String?
  tokenTx     String?
  wageId      Int
  wage        Wage     @relation(fields: [wageId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  subject     String?
  message     String
  isRead      Boolean  @default(false)
  userAddress String
  user        User     @relation(fields: [userAddress], references: [address])
  author      String?
  resource    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamContract {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  type      String
  deployer  String
  admins    String[]
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([address])
}

model BoardOfDirectorActions {
  id            Int      @id @default(autoincrement())
  actionId      Int
  description   String
  targetAddress String
  userAddress   String
  isExecuted    Boolean  @default(false)
  data          String
  createdBy     User     @relation(fields: [userAddress], references: [address])
  teamId        Int
  team          Team     @relation(fields: [teamId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
