openapi: "3.0.2"
servers:
  - url: http://localhost:3000

security:
  - BearerAuth: []

info:
  title: CNC Portal
  version: "1.0"
paths:
  /api/auth/siwe:
    post:
      security: []
      tags:
        - Authentication
      summary: Authenticates user using SIWE
      description: |
        Verifies that the user has the corresponding private key for the Ethereum wallet address they claim to own.
        Additionally, it generates a new nonce and associates it with the user address for the next sign-in session.
        If the user doesn't exist, it creates a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message to be signed.
                signature:
                  type: string
                  description: The signature of the signed message
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "401":
          description: Authentication failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/token:
    get:
      tags:
        - Authentication
      summary: Verifies the JWT token is valid
      description: Checks whether the JWT token supplied is valid
      responses:
        "200":
          description: Authentication token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the authentication token is valid.
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/user/nonce/{address}:
    get:
      security: []
      summary: Get user nonce
      description: Returns the nonce to use with the SIWE message to prevent replay attacks
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/WalletAddress"
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates whether the operation was successful
                  nonce:
                    type: string
                    description: Random string for the user to sign with the SIWE message that prevents replay attacks
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/user/{address}:
    get:
      summary: Get user by address
      description: Fetch user based on Ethereum address
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/WalletAddress"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update user by address
      description: Update user details like name by address
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/WalletAddress"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/teams:
    get:
      summary: Fetch all Teams
      description: Returns all teams belonging to user
      parameters:
        - $ref: "#/components/parameters/OwnerID"
        - in: header
          name: ownerAddress
          schema:
            type: string
          required: true
      tags:
        - Teams

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamList"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Create Team
      description: Create a team in the CNC portal
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teams/{id}:
    get:
      summary: Get Team by ID
      description: Fetch team based on ID
      tags:
        - Teams
      parameters:
        - $ref: "#/components/parameters/TeamID"
        - in: header
          name: ownerAddress
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update Team by ID
      description: Update Team details like name and description by ID
      tags:
        - Teams
      parameters:
        - $ref: "#/components/parameters/TeamID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete Team by ID
      description: Delete Team based on ID
      tags:
        - Teams
      parameters:
        - $ref: "#/components/parameters/TeamID"
      responses:
        "200":
          description: OK
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/members/{id}:
    put:
      summary: Update member by ID
      description: Update member by ID
      tags:
        - Members
      parameters:
        - $ref: "#/components/parameters/MemberID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete member by ID
      description: Delete member by ID
      tags:
        - Members
      parameters:
        - $ref: "#/components/parameters/MemberID"
      responses:
        "200":
          description: OK
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create members
      description: Create/add members in a team
      tags:
        - Members
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberCreateRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    AuthToken:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the authentication was successful
        accessToken:
          type: string
          description: A JWT token for accessing protected routes

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        message:
          type: string
          description: Details about the error.
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the user
        name:
          type: string
          description: Name of the user
        walletAddress:
          type: string
          description: Wallet address of the user
        nonce:
          type: string
          description: Random string for the user to sign with the SIWE message that prevents replay attacks
    Team:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the team
        name:
          type: string
          description: Name of the team
        description:
          type: string
          description: Description of the team
        ownerId:
          type: string
          description: Owner's ID of the team

    TeamList:
      type: array
      items:
        $ref: "#/components/schemas/Team"

    Member:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the member
        name:
          type: string
          description: Name of the member
        walletAddress:
          type: string
          description: Wallet address of the member

    TeamCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the team
        members:
          type: object
          properties:
            createMany:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    required:
                      - name
                      - walletAddress
                    properties:
                      name:
                        type: string
                        description: Name of the member
                      walletAddress:
                        type: string
                        description: Wallet address of the member
        description:
          type: string
          description: Description of the team
        address:
          type: string
          description: Address of the owner

    TeamUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the team
        description:
          type: string
          description: Description of the team
        bankAddress:
          type: string
          description: Bank smartt contract address of the team

    MemberCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the member
        walletAddress:
          type: string
          description: Wallet address of the member

    MemberUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the member
        walletAddress:
          type: string
          description: Wallet address of the member

  parameters:
    WalletAddress:
      in: path
      name: address
      schema:
        type: string
      required: true
      description: Ethereum address of the user
    OwnerID:
      in: query
      name: id
      schema:
        type: integer
      required: true
      description: The ID of the owner
    TeamID:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: The ID of the team
    MemberID:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: The ID of the member

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
